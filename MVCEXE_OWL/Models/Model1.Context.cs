//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVCEXE_OWL.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OswalNextGenEntities : DbContext
    {
        public OswalNextGenEntities()
            : base("name=OswalNextGenEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<OWL_BusinessPlanMaster> OWL_BusinessPlanMaster { get; set; }
        public virtual DbSet<OWL_BusinessServicesMaster> OWL_BusinessServicesMaster { get; set; }
        public virtual DbSet<OWL_CareersMaster> OWL_CareersMaster { get; set; }
        public virtual DbSet<OWL_CityMaster> OWL_CityMaster { get; set; }
        public virtual DbSet<OWL_ClientMaster> OWL_ClientMaster { get; set; }
        public virtual DbSet<OWL_CountryMaster> OWL_CountryMaster { get; set; }
        public virtual DbSet<OWL_DepartmentMaster> OWL_DepartmentMaster { get; set; }
        public virtual DbSet<OWL_DesignationMaster> OWL_DesignationMaster { get; set; }
        public virtual DbSet<OWL_DocCategoryMaster> OWL_DocCategoryMaster { get; set; }
        public virtual DbSet<OWL_DocTypeMaster> OWL_DocTypeMaster { get; set; }
        public virtual DbSet<OWL_DocumentMaster> OWL_DocumentMaster { get; set; }
        public virtual DbSet<OWL_EmployeeDetail> OWL_EmployeeDetail { get; set; }
        public virtual DbSet<OWL_EmployeeMaster> OWL_EmployeeMaster { get; set; }
        public virtual DbSet<OWL_EnqueryMaster> OWL_EnqueryMaster { get; set; }
        public virtual DbSet<OWL_JobModeMaster> OWL_JobModeMaster { get; set; }
        public virtual DbSet<OWL_JobsPostMaster> OWL_JobsPostMaster { get; set; }
        public virtual DbSet<OWL_JobTypeMaster> OWL_JobTypeMaster { get; set; }
        public virtual DbSet<OWL_LoginMaster> OWL_LoginMaster { get; set; }
        public virtual DbSet<OWL_PostsMaster> OWL_PostsMaster { get; set; }
        public virtual DbSet<OWL_PostTypeMaster> OWL_PostTypeMaster { get; set; }
        public virtual DbSet<OWL_QualificationMaster> OWL_QualificationMaster { get; set; }
        public virtual DbSet<OWL_QuestionMaster> OWL_QuestionMaster { get; set; }
        public virtual DbSet<OWL_ResourceMaster> OWL_ResourceMaster { get; set; }
        public virtual DbSet<OWL_SectorTypeMaster> OWL_SectorTypeMaster { get; set; }
        public virtual DbSet<OWL_ServicesCategoryMaster> OWL_ServicesCategoryMaster { get; set; }
        public virtual DbSet<OWL_StateMaster> OWL_StateMaster { get; set; }
        public virtual DbSet<OWL_StatusListMaster> OWL_StatusListMaster { get; set; }
        public virtual DbSet<OWL_TagsMaster> OWL_TagsMaster { get; set; }
        public virtual DbSet<OWL_UserMaster> OWL_UserMaster { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual int EmployeeMasterOperation(Nullable<int> empId, Nullable<int> userType, string empName, string empEmail, Nullable<int> empDept, Nullable<int> qualification, Nullable<int> city, Nullable<System.DateTime> addedOn, Nullable<System.DateTime> updatedOn, Nullable<bool> isDel, Nullable<int> operation, string response)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(int));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var empEmailParameter = empEmail != null ?
                new ObjectParameter("EmpEmail", empEmail) :
                new ObjectParameter("EmpEmail", typeof(string));
    
            var empDeptParameter = empDept.HasValue ?
                new ObjectParameter("EmpDept", empDept) :
                new ObjectParameter("EmpDept", typeof(int));
    
            var qualificationParameter = qualification.HasValue ?
                new ObjectParameter("Qualification", qualification) :
                new ObjectParameter("Qualification", typeof(int));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(int));
    
            var addedOnParameter = addedOn.HasValue ?
                new ObjectParameter("AddedOn", addedOn) :
                new ObjectParameter("AddedOn", typeof(System.DateTime));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var isDelParameter = isDel.HasValue ?
                new ObjectParameter("IsDel", isDel) :
                new ObjectParameter("IsDel", typeof(bool));
    
            var operationParameter = operation.HasValue ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(int));
    
            var responseParameter = response != null ?
                new ObjectParameter("Response", response) :
                new ObjectParameter("Response", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeeMasterOperation", empIdParameter, userTypeParameter, empNameParameter, empEmailParameter, empDeptParameter, qualificationParameter, cityParameter, addedOnParameter, updatedOnParameter, isDelParameter, operationParameter, responseParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
